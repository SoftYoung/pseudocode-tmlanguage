{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "pseudocode",
  "patterns": [
    { "include": "#keywords" },
    { "include": "#controlKeywords" },
    { "include": "#comments" },
    { "include": "#numbers" },
    { "include": "#operators" },
    { "include": "#strings" },
    { "include": "#functions" },
    { "include": "#arrays" },
    { "include": "#variables" }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.other.pseudocode",
          "match": "\\b(set|to|call|display|read|prompt|begin|end)\\b"
        }
      ]
    },
    "controlKeywords": {
      "patterns": [
        {
          "name": "keyword.control.pseudocode",
          "match": "\\b(if|then|else|endif|while|do|endwhile|for|from|endfor|procedure|endprocedure|return)\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.pseudocode",
          "match": "#.*$"
        },
        {
          "name": "comment.line.double-slash.pseudocode",
          "match": "//.*$"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.pseudocode",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.pseudocode",
          "match": "(==|equals|!=|<>|-gt|gt|-lt|lt|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.pseudocode",
          "match": "\\b(and|or)\\b"
        },
        {
          "name": "keyword.operator.arithmetic.pseudocode",
          "match": "(\\+|-|\\*|/|%|Mod)"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.pseudocode",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.pseudocode",
          "match": "\\\\."
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "match": "\\b(procedure)\\s+([A-Za-z_]\\w*)\\s*\\(",
          "captures": {
            "1": { "name": "keyword.control.pseudocode" },
            "2": { "name": "entity.name.function.pseudocode" }
          }
        },
        {
          "match": "\\b(call)\\s+([A-Za-z_]\\w*)\\s*\\(",
          "captures": {
            "1": { "name": "keyword.other.pseudocode" },
            "2": { "name": "entity.name.function.pseudocode" }
          }
        }
      ]
    },
    "arrays": {
      "patterns": [
        {
          "match": "\\b([A-Za-z_]\\w*)\\s*\\[",
          "captures": {
            "1": { "name": "variable.other.pseudocode" }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.pseudocode",
          "match": "\\b(?!(if|then|else|endif|while|do|endwhile|for|from|endfor|procedure|endprocedure|return|set|to|call|display|read|prompt|begin|end|and|or|Mod)\\b)[A-Za-z_]\\w*\\b"
        }
      ]
    }
  },
  "scopeName": "source.pseudocode"
}
